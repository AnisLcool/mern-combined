{"version":3,"file":"static/js/849.7bdd8cf1.chunk.js","mappings":"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","sources":["Places/Pages/NewPlace.jsx","Shared/Components/FormElements/ImageUpload.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Input from '../../Shared/Components/FormElements/Input';\r\nimport Button from '../../Shared/Components/FormElements/Button';\r\nimport ImageUpload from '../../Shared/Components/FormElements/ImageUpload';\r\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../Shared/util/validators';\r\nimport { useForm } from '../../Shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../Shared/hooks/http-hook';\r\n\r\nimport './PlaceForm.css';\r\nimport authContext from '../../Shared/context/auth-context';\r\nimport Spinner from '../../Shared/Components/UIElements/Spinner';\r\nimport ErrorModal from '../../Shared/Components/UIElements/ErrorModal';\r\n\r\n\r\nfunction NewPlace(props) {\r\n  const { loading, sendRequest, cancelError, errorState } = useHttpClient();\r\n  const { userId, token } = useContext(authContext)\r\n  const navigate = useNavigate();\r\n  const [formState, inputHandler] = useForm({\r\n\r\n    title: {\r\n      value: '',\r\n      isValid: false\r\n    },\r\n    description: {\r\n      value: '',\r\n      isValid: false\r\n    },\r\n    address: {\r\n      value: '',\r\n      isValid: false\r\n    },\r\n    image:{\r\n      value:'',\r\n      isValid: false\r\n    }\r\n  }, false);\r\n\r\n\r\n  const placeSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    for (const input in formState.inputs)\r\n      formData.append(input, formState.inputs[input].value);\r\n\r\n    try {\r\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + '/places', 'POST', formData, {'Authorization':'Bearer ' + token})\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.log('Error ', error);\r\n    }\r\n    // send data to the server\r\n  }\r\n  return (\r\n    <>\r\n      {loading && <Spinner asOverlay />}\r\n      <ErrorModal show={errorState} onClear={cancelError} />\r\n      <form className='place-form'>\r\n        <Input id='title' type='text' label='Title' placeholder='Insert title ...' element='input' errorText='Please enter a valid title!' validators={[VALIDATOR_REQUIRE()]} onInput={inputHandler} />\r\n\r\n        <Input id='description' type='textarea' label='Description' placeholder='Insert description ...' element='textarea' errorText='Please enter a valid description!(at lease 5 characters)' validators={[VALIDATOR_MINLENGTH(5)]} onInput={inputHandler} />\r\n\r\n        <Input id='address' type='input' label='Address' placeholder='Insert address ...' element='input' errorText='Please enter a valid address!' validators={[VALIDATOR_REQUIRE()]} onInput={inputHandler} />\r\n\r\n        <ImageUpload onInput={inputHandler} center id='image' errorText='please provide an image'/>\r\n\r\n        <Button onClick={placeSubmitHandler} type='submit' disabled={!formState.isValid}>ADD PLACE</Button>\r\n\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewPlace;","import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from './Button';\r\nimport './ImageUpload.css';\r\nfunction ImageUpload(props) {\r\n    const [file, setFile] = useState('');\r\n    const [imageUrl, setImageUrl] = useState(null);\r\n    const [isValid, setIsValid] = useState(false);\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        // FileReader : API that exists in the browsers that helps us read files, converts binary data into images\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            // this will execute in async way once the fileReader is done reading the file\r\n            setImageUrl(reader.result);\r\n        }\r\n        reader.readAsDataURL(file);\r\n    })\r\n    // we need a ref to attack it to the input file picker , so that we can trigger it once we click on the button\r\n    const filePickRef = useRef()\r\n    const pickImageHandler = () => {\r\n        // when we click on the button the filePicker input gets clicked also by triggering the click function\r\n        filePickRef.current.click();\r\n    }\r\n    const onChangePickImageHandler = (event) => {\r\n        // event.target.files => hold the selected files\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            pickedFile = event.target.files[0]\r\n            setFile(pickedFile)\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        // isValid is not updated immediately , so we need to use the fileIsValid variable which reflects the value of isValid\r\n        props.onInput(props.id, pickedFile, !isValid)\r\n\r\n\r\n    }\r\n    return (\r\n        <div className='from-control' style={{ marginTop: '1rem', marginBottom: '1rem' }}>\r\n            {/* keep in mind that the file picker is ugly and it is not displayed */}\r\n            <input ref={filePickRef} type='file' id={props.id} style={{ display: 'none' }} accept='.jpg , .png, .jpeg' onChange={onChangePickImageHandler} />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className='image-upload__preview'>\r\n                    {imageUrl && <img src={imageUrl} alt='Preview' />}\r\n                    {!imageUrl && <p>Please pick an image!</p>}\r\n                </div>\r\n                <Button type='button' onClick={pickImageHandler}>PICK IMAGE</Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageUpload;"],"names":["props","useHttpClient","loading","sendRequest","cancelError","errorState","useContext","authContext","token","userId","navigate","useNavigate","useForm","title","value","isValid","description","address","image","formState","inputHandler","placeSubmitHandler","e","input","preventDefault","formData","FormData","inputs","append","process","console","log","asOverlay","show","onClear","className","id","type","label","placeholder","element","errorText","validators","VALIDATOR_REQUIRE","onInput","VALIDATOR_MINLENGTH","center","onClick","disabled","useState","file","setFile","imageUrl","setImageUrl","setIsValid","useEffect","reader","FileReader","onload","result","readAsDataURL","filePickRef","useRef","style","marginTop","marginBottom","ref","display","accept","onChange","event","pickedFile","target","files","length","src","alt","Button","current","click"],"sourceRoot":""}