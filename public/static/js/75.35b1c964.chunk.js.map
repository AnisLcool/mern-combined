{"version":3,"file":"static/js/75.35b1c964.chunk.js","mappings":"mQAoGA,UArFA,SAAqBA,GACnB,OAA0DC,EAAAA,EAAAA,KAAlDC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,YAAaC,EAA9B,EAA8BA,YAAaC,EAA3C,EAA2CA,WAC3C,GAAsCC,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAGxB,GAA+CC,EAAAA,EAAAA,GAAQ,CACrDC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAEV,GATH,eAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KAYQC,GAAYC,EAAAA,EAAAA,MAAZD,SAGRE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,yCAAG,kHAEItB,EAAYuB,yDAA+CJ,GAF/D,OAETK,EAFS,OAGfnB,EAAemB,EAAKC,OACpBP,EAAY,CACVN,MAAO,CACLC,MAAOW,EAAKC,MAAMb,MAClBE,SAAS,GAEXC,YAAa,CACXF,MAAOW,EAAKC,MAAMV,YAClBD,SAAS,KAEV,GAbY,gDAgBfY,QAAQC,IAAR,MAhBe,yDAAH,qDAqBhBL,GAGD,GAAE,CAACJ,EAAalB,EAAamB,IAG9B,IAAMS,EAAkB,yCAAG,WAAOC,GAAP,8EAIzB,IAAWC,KAHXD,EAAEE,iBAEIC,EAAW,CAAC,EACEhB,EAAUiB,OACxBjB,EAAUiB,OAAOH,KACnBE,EAASF,GAASd,EAAUiB,OAAOH,GAAOjB,OANrB,yBASFb,EAAYuB,yDAA+CnB,EAAY8B,GAAI,QAASC,KAAKC,UAAUJ,GAAW,CAAC,eAAe,mBAAoB,cAAiB,UAAYxB,EAAK6B,QATlL,cAUvB/B,EAAS,IAAD,OAAKE,EAAK8B,OAAV,YAVe,kDAYvBZ,QAAQC,IAAI,SAAU,KAAMY,SAZL,0DAAH,sDAiBxB,OACE,iCACE,SAAC,IAAD,CAAYC,MAAOtC,EAAYuC,QAASxC,IACvCF,IAAW,SAAC,IAAD,CAAS2C,WAAS,KAC5BxC,IAAeE,IAAe,0BAAK,SAAC,IAAD,CAAMuC,UAAU,SAAhB,UAAyB,sDAC7DvC,IACC,kBAAMuC,UAAU,aAAhB,WACE,SAAC,IAAD,CAAOT,GAAG,QAAQU,KAAK,OAAOC,MAAM,QAAQC,YAAY,mBAAmBC,QAAQ,QAAQC,UAAU,8BAA8BC,WAAY,EAACC,EAAAA,EAAAA,OAAsBC,QAASlC,EAAcJ,MAAOT,EAAYQ,MAAOwC,OAAO,KAE9N,SAAC,IAAD,CAAOlB,GAAG,cAAcU,KAAK,WAAWC,MAAM,cAAcC,YAAY,yBAAyBC,QAAQ,WAAWC,UAAU,2DAA2DC,WAAY,EAACI,EAAAA,EAAAA,IAAoB,IAAKF,QAASlC,EAAcJ,MAAOT,EAAYW,YAAaqC,OAAO,KAE7R,SAAC,IAAD,CAAQE,QAAS1B,EAAoBgB,KAAK,SAASW,UAAWvC,EAAUF,QAAxE,+BAKT,C,0ECxFD,MARA,SAAcjB,GACV,OACI,gBAAK8C,UAAS,eAAU9C,EAAM8C,WAAaa,MAAO3D,EAAM2D,MAAxD,SACK3D,EAAM4D,UAGlB,C","sources":["Places/Pages/UpdatePlace.jsx","Shared/Components/UIElements/Card.jsx"],"sourcesContent":["import React, { useCallback, useContext, useEffect, useReducer, useState } from 'react';\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\r\nimport Input from '../../Shared/Components/FormElements/Input';\r\nimport Button from '../../Shared/Components/FormElements/Button';\r\nimport { VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../Shared/util/validators';\r\nimport { useForm } from '../../Shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../Shared/hooks/http-hook';\r\nimport Spinner from '../../Shared/Components/UIElements/Spinner';\r\nimport ErrorModal from '../../Shared/Components/UIElements/ErrorModal';\r\nimport authContext from '../../Shared/context/auth-context';\r\n\r\nimport './PlaceForm.css';\r\nimport Card from '../../Shared/Components/UIElements/Card';\r\n\r\n\r\nfunction UpdatePlace(props) {\r\n  const { loading, sendRequest, cancelError, errorState } = useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState(null);\r\n  const navigate = useNavigate();\r\n  const auth = useContext(authContext)\r\n\r\n\r\n  const [formState, inputHandler, setFormData] = useForm({\r\n    title: {\r\n      value: '',\r\n      isValid: false\r\n    },\r\n    description: {\r\n      value: '',\r\n      isValid: false\r\n    }\r\n  }, false);\r\n\r\n\r\n  const { placeId } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const data = await sendRequest(process.env.REACT_APP_BACKEND_URL+'/places/' + placeId)\r\n        setLoadedPlace(data.place)\r\n        setFormData({\r\n          title: {\r\n            value: data.place.title,\r\n            isValid: true\r\n          },\r\n          description: {\r\n            value: data.place.description,\r\n            isValid: true\r\n          }\r\n        }, true);\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n\r\n    }\r\n\r\n    fetchPlace();\r\n\r\n\r\n  }, [setFormData, sendRequest, placeId])\r\n\r\n\r\n  const placeSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    // send data to the server\r\n    const bodyForm = {}\r\n    for (const input in formState.inputs) {\r\n      if (formState.inputs[input])\r\n        bodyForm[input] = formState.inputs[input].value;\r\n    }\r\n    try {\r\n      const result = await sendRequest(process.env.REACT_APP_BACKEND_URL+'/places/' + loadedPlace.id, 'PATCH', JSON.stringify(bodyForm), {'Content-type':'application/json', 'Authorization': 'Bearer ' + auth.token})\r\n      navigate(`/${auth.userId}/places`)\r\n    } catch (error) {\r\n      console.log('error ', error.message);\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={errorState} onClear={cancelError} />\r\n      {loading && <Spinner asOverlay />}\r\n      {!errorState && !loadedPlace && <div><Card className='center'><h2>Could not find place!</h2></Card></div>}\r\n      {loadedPlace &&\r\n        <form className='place-form'>\r\n          <Input id='title' type='text' label='Title' placeholder='Insert title ...' element='input' errorText='Please enter a valid title!' validators={[VALIDATOR_REQUIRE()]} onInput={inputHandler} value={loadedPlace.title} valid={true} />\r\n\r\n          <Input id='description' type='textarea' label='Description' placeholder='Insert description ...' element='textarea' errorText='Please enter a valid description!(at lease 5 characters)' validators={[VALIDATOR_MINLENGTH(5)]} onInput={inputHandler} value={loadedPlace.description} valid={true} />\r\n\r\n          <Button onClick={placeSubmitHandler} type='submit' disabled={!formState.isValid}>UPDATE PLACE</Button>\r\n\r\n        </form>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdatePlace;","import React from 'react';\r\nimport './Card.css';\r\nfunction Card(props) {\r\n    return (\r\n        <div className={`card ${props.className}`} style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;"],"names":["props","useHttpClient","loading","sendRequest","cancelError","errorState","useState","loadedPlace","setLoadedPlace","navigate","useNavigate","auth","useContext","authContext","useForm","title","value","isValid","description","formState","inputHandler","setFormData","placeId","useParams","useEffect","fetchPlace","process","data","place","console","log","placeSubmitHandler","e","input","preventDefault","bodyForm","inputs","id","JSON","stringify","token","userId","message","error","onClear","asOverlay","className","type","label","placeholder","element","errorText","validators","VALIDATOR_REQUIRE","onInput","valid","VALIDATOR_MINLENGTH","onClick","disabled","style","children"],"sourceRoot":""}