{"version":3,"file":"static/js/364.44987c20.chunk.js","mappings":"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","sources":["Shared/Components/FormElements/ImageUpload.jsx","Users/Pages/Auth.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from './Button';\r\nimport './ImageUpload.css';\r\nfunction ImageUpload(props) {\r\n    const [file, setFile] = useState('');\r\n    const [imageUrl, setImageUrl] = useState(null);\r\n    const [isValid, setIsValid] = useState(false);\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        // FileReader : API that exists in the browsers that helps us read files, converts binary data into images\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            // this will execute in async way once the fileReader is done reading the file\r\n            setImageUrl(reader.result);\r\n        }\r\n        reader.readAsDataURL(file);\r\n    })\r\n    // we need a ref to attack it to the input file picker , so that we can trigger it once we click on the button\r\n    const filePickRef = useRef()\r\n    const pickImageHandler = () => {\r\n        // when we click on the button the filePicker input gets clicked also by triggering the click function\r\n        filePickRef.current.click();\r\n    }\r\n    const onChangePickImageHandler = (event) => {\r\n        // event.target.files => hold the selected files\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            pickedFile = event.target.files[0]\r\n            setFile(pickedFile)\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        // isValid is not updated immediately , so we need to use the fileIsValid variable which reflects the value of isValid\r\n        props.onInput(props.id, pickedFile, !isValid)\r\n\r\n\r\n    }\r\n    return (\r\n        <div className='from-control' style={{ marginTop: '1rem', marginBottom: '1rem' }}>\r\n            {/* keep in mind that the file picker is ugly and it is not displayed */}\r\n            <input ref={filePickRef} type='file' id={props.id} style={{ display: 'none' }} accept='.jpg , .png, .jpeg' onChange={onChangePickImageHandler} />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className='image-upload__preview'>\r\n                    {imageUrl && <img src={imageUrl} alt='Preview' />}\r\n                    {!imageUrl && <p>Please pick an image!</p>}\r\n                </div>\r\n                <Button type='button' onClick={pickImageHandler}>PICK IMAGE</Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageUpload;","import React, { useContext, useState } from 'react';\r\n\r\nimport { useForm } from '../../Shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../Shared/hooks/http-hook';\r\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH } from '../../Shared/util/validators';\r\n\r\nimport Input from '../../Shared/Components/FormElements/Input';\r\nimport Button from '../../Shared/Components/FormElements/Button';\r\nimport AuthContext from '../../Shared/context/auth-context';\r\nimport ErrorModal from '../../Shared/Components/UIElements/ErrorModal';\r\nimport Spinner from '../../Shared/Components/UIElements/Spinner';\r\nimport ImageUpload from '../../Shared/Components/FormElements/ImageUpload';\r\n\r\nimport './Auth.css';\r\n\r\n\r\nfunction Auth(props) {\r\n    const { sendRequest, loading, cancelError, errorState } = useHttpClient();\r\n    const authContext = useContext(AuthContext);\r\n    const [formType, setFormType] = useState('login');\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n\r\n        // username: {\r\n        //     value: '',\r\n        //     isValid: false\r\n        // },\r\n        email: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        password: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n    }, false);\r\n\r\n\r\n    const authenticate = async (e) => {\r\n        e.preventDefault();\r\n        // if the form type is Login : we send json data\r\n        // if the form type is signup : we send formData(cuz multer will take care of the rest by  extracting the fileds)\r\n        // FormData : special type that accepts text and binary data\r\n        const formData = new FormData();\r\n        const bodyForm = {}\r\n\r\n        for (const input in formState.inputs) {\r\n            if (formState.inputs[input] && formType === 'signup')\r\n                formData.append(input, formState.inputs[input].value)\r\n            else if (formState.inputs[input])\r\n                bodyForm[input] = formState.inputs[input].value\r\n        }\r\n\r\n        const headers = formType === 'login' ? { 'Content-type': 'application/json' } : {};\r\n        const dataToSend = formType === 'signup' ? formData : JSON.stringify(bodyForm);\r\n        \r\n        try {\r\n            // fetchApi will set the right headers for the formData type\r\n            \r\n            const data = await sendRequest(process.env.REACT_APP_BACKEND_URL+'/users/' + formType, 'POST', dataToSend , headers)\r\n            formType === 'signup' ? changeFormType() : authContext.login(data.userId, data.token);\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const changeFormType = (e) => {\r\n        // we check if the event is undefined or not\r\n        // if event is undefined that means changeFormType was triggered with a function call not a click on the button\r\n        // if it is not undefined we execute preventDefault\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        // if we dont verify its value the code below  wont be executed\r\n        if (formType === 'signup') {\r\n            setFormData({\r\n                ...formState.inputs,\r\n                username: undefined,\r\n                image: undefined\r\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid)\r\n        } else {\r\n            setFormData({\r\n                ...formState.inputs,\r\n                username: {\r\n                    value: '',\r\n                    isValid: false\r\n                },\r\n                image: {\r\n                    value: '',\r\n                    isValid: false\r\n                }\r\n            }, false)\r\n        }\r\n\r\n        setFormType(formType === 'signup' ? 'login' : 'signup');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorModal error={errorState} onClear={cancelError} />\r\n\r\n            {loading && <Spinner asOverlay />}\r\n            <form className='auth-form'>\r\n                <h2>{formType === 'signup' ? 'Regiser' : 'Log in'}</h2>\r\n                {formType === 'signup' && <Input id='username' type='text' label='Username' placeholder='Insert username ...' element='input' errorText='Please enter a username of at least 2 characters!' validators={[VALIDATOR_MINLENGTH(3)]} onInput={inputHandler} />}\r\n\r\n\r\n                <Input id='email' type='email' label='Email' placeholder='Insert Email ...' element='input' errorText='Please enter a valid email' validators={[VALIDATOR_EMAIL()]} onInput={inputHandler} />\r\n\r\n\r\n\r\n                <Input id='password' type='password' label='Password' placeholder='Insert Password ...' element='input' errorText='Please enter a valid password!(at lease 4 characters)' validators={[VALIDATOR_MINLENGTH(4)]} onInput={inputHandler} />\r\n\r\n                {formType === 'signup' && <ImageUpload id='image' center onInput={inputHandler} errorText='please provide an image' />}\r\n\r\n                <Button onClick={authenticate} type='submit' disabled={!formState.isValid}>SUBMIT</Button>\r\n                <Button onClick={changeFormType} inverse>SWITCH FORM</Button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Auth;"],"names":["props","useState","file","setFile","imageUrl","setImageUrl","isValid","setIsValid","useEffect","reader","FileReader","onload","result","readAsDataURL","filePickRef","useRef","className","style","marginTop","marginBottom","ref","type","id","display","accept","onChange","event","pickedFile","target","files","length","onInput","center","src","alt","Button","onClick","current","click","errorText","useHttpClient","sendRequest","loading","cancelError","errorState","authContext","useContext","AuthContext","formType","setFormType","useForm","email","value","password","formState","inputHandler","setFormData","authenticate","e","input","preventDefault","formData","FormData","bodyForm","inputs","append","headers","dataToSend","JSON","stringify","process","data","changeFormType","login","userId","token","username","undefined","image","ErrorModal","error","onClear","Spinner","asOverlay","Input","label","placeholder","element","validators","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","ImageUpload","disabled","inverse"],"sourceRoot":""}